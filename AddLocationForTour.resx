<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        lSq4qEaY0qVM3//Z
</value>
  </data>
</root>